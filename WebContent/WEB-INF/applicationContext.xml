<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ws="http://jax-ws.dev.java.net/spring/core"
	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-3.1.xsd  
            http://www.springframework.org/schema/util   
            http://www.springframework.org/schema/util/spring-util-3.1.xsd
            
        http://jax-ws.dev.java.net/spring/core
		http://jax-ws.java.net/spring/core.xsd
		http://jax-ws.dev.java.net/spring/servlet
		
       http://jax-ws.java.net/spring/servlet.xsd">
       
        <context:annotation-config/>

	<wss:binding url="/jaxws-spring">
		<wss:service>
			<ws:service bean="#myserviceWs" />
		</wss:service>
	</wss:binding>
	
	<wss:binding url="/userservice">
		<wss:service>
			<ws:service bean="#userServiceWs" />
		</wss:service>
	</wss:binding>
	

	<!-- Web service bean -->
	<bean id="myserviceWs" class="com.jaxws_web.TestWebServiceImpl">
		<property name="myBObject" ref="MyBObject" />
	</bean>

	<bean id="MyBObject" class="com.jaxws_web.MyBObjectImpl" />
	

	
	
	<bean id="dAOImpl" class="com.dz.common.DAOImpl" />

	<bean id="userAPIImpl" class="com.dz.user.UserAPIImpl">
		<property name="dAOImpl" ref="dAOImpl" />
	</bean>
		

	<bean id="userServiceWs" class="com.dz.user.UserServiceImpl">
		<property name="userAPIImpl" ref="userAPIImpl" />
	</bean>
	
	
	
	<!-- Data Source -->  
    <bean id="dataSource"  
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />  
        <property name="url" value="jdbc:mysql://localhost:3306/jaxws_spring" />  
        <property name="username" value="root" />  
        <property name="password" value="" />  
    </bean>  
  
    
    
    <!-- This will ensure that Hibernate or JPA exceptions are automatically   
        translated into Spring's generic DataAccessException hierarchy for those   
        classes annotated with Repository. For example, see ***DAOImpl. -->  
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />  
  
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /> 
  
    
  
    <!-- JPA Entity Manager Factory -->  
    <!--待扫描的实体类包，不再需要persistence.xml了-->  
<!--     <bean id="entityManagerFactory"  
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"  
        p:packagesToScan="com.dz.configurable" 
        p:dataSource-ref="dataSource"  
        p:jpaVendorAdapter-ref="hibernateVendor"
        p:jpaPropertyMap-ref="jpaPropertyMap" 
    />  -->

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		p:packagesToScan="com.dz.configurable" 
		p:jpaVendorAdapter-ref="hibernateVendor">
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
		<property name="persistenceUnitName" value="jms" />
	</bean>
  
    
    <util:map id="jpaPropertyMap">  
        <!-- <entry key="hibernate.hbm2ddl.auto" value="update" /> -->  
        <entry key="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect" />  
  
        <!-- To enable Hibernate's second level cache and query cache settings -->  
        <entry key="hibernate.max_fetch_depth" value="4" />  
        <entry key="hibernate.cache.use_second_level_cache" value="true" />
        <!--   
        <entry key="hibernate.cache.use_query_cache" value="true" />  
        <entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory" />  
        -->
    </util:map>  
  
    
    <bean id="hibernateVendor"  
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"  
        p:database="MYSQL"
        p:showSql="true"
        p:generateDdl="true"  
        p:databasePlatform="org.hibernate.dialect.MySQLDialect" 
    />  
  
    
    <!-- Transaction Config -->  
    <bean id="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager"  
        p:entityManagerFactory-ref="entityManagerFactory">  
        <property name="jpaDialect">  
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />  
        </property>  
    </bean>  
  
    
    <!-- User declarative transaction management -->  
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

<!-- 	<aop:config>
		<aop:pointcut id="productServiceMethods"
			expression="execution(* com.dz.*.*Impl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="productServiceMethods" />
	</aop:config>
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" propagation="REQUIRES_NEW" />
		</tx:attributes>
	</tx:advice> -->
    
    

</beans>